apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: prometheus-statsd-exporter
  namespace: monitoring
spec:
  chart: prometheus-statsd-exporter
  repo: https://prometheus-community.github.io/helm-charts
  targetNamespace: monitoring
  valuesContent: |-
    image:
      repository: prom/statsd-exporter
      pullPolicy: Always
      # Overrides the image tag whose default is the chart appVersion.
      tag: "latest"

    statsd:
      # The UDP port on which to receive statsd metric lines.
      udpPort: 9125

      # The TCP port on which to receive statsd metric lines.
      tcpPort: 9125

      # Maximum size of your metric mapping cache.
      # Relies on least recently used replacement policy if max size is reached.
      cacheSize: 1000

      # Size of internal queue for processing events.
      eventQueueSize: 10000

      # Number of events to hold in queue before flushing.
      eventFlushThreshold: 1000

      # Time interval before flushing events in queue.
      eventFlushInterval: 200ms

      # Metric mapping configuration
      mappingConfig: |-
        mappings:
          ## Web collector
          - match: mastodon\_web\_(.+)\_(.+)\_(.+)\_status\_(.+)
            match_type: regex
            name: "mastodon_controller_status"
            labels:
              controller: $1
              action: $2
              format: $3
              status: $4
              mastodon: "web"
          - match: mastodon\_web\_(.+)\_(.+)\_(.+)\_db_time
            match_type: regex
            name: "mastodon_controller_db_time"
            labels:
              controller: $1
              action: $2
              format: $3
              mastodon: "web"
          - match: mastodon\_web\_(.+)\_(.+)\_(.+)\_view_time
            match_type: regex
            name: "mastodon_controller_view_time"
            labels:
              controller: $1
              action: $2
              format: $3
              mastodon: "web"
          - match: mastodon\_web\_(.+)\_(.+)\_(.+)\_total_duration
            match_type: regex
            name: "mastodon_controller_duration"
            labels:
              controller: $1
              action: $2
              format: $3
              mastodon: "web"

          ## Database collector
          - match: mastodon\_db\_tables\_(.+)\_queries\_(.+)\_duration
            match_type: regex
            name: "mastodon_db_operation"
            labels:
              table: "$1"
              operation: "$2"
              mastodon: "db"

          ## Cache collector
          - match: mastodon\_cache\_(.+)\_duration
            match_type: regex
            name: "mastodon_cache_duration"
            labels:
              operation: "$1"
              mastodon: "cache"

          ## Sidekiq collector
          - match: mastodon\_sidekiq\_(.+)\_processing_time
            match_type: regex
            name: "mastodon_sidekiq_worker_processing_time"
            labels:
              worker: "$1"
              mastodon: "sidekiq"
          - match: mastodon\_sidekiq\_(.+)\_success
            match_type: regex
            name: "mastodon_sidekiq_worker_success_total"
            labels:
              worker: "$1"
              mastodon: "sidekiq"
          - match: mastodon\_sidekiq\_(.+)\_failure
            match_type: regex
            name: "mastodon_sidekiq_worker_failure_total"
            labels:
              worker: "$1"
              mastodon: "sidekiq"
          - match: mastodon\_sidekiq\_queues\_(.+)\_enqueued
            match_type: regex
            name: "mastodon_sidekiq_queue_enqueued"
            labels:
              queue: "$1"
              mastodon: "sidekiq"
          - match: mastodon\_sidekiq\_queues\_(.+)\_latency
            match_type: regex
            name: "mastodon_sidekiq_queue_latency"
            labels:
              queue: "$1"
              mastodon: "sidekiq"
          - match: mastodon\_sidekiq\_(.+)
            match_type: regex
            name: "mastodon_sidekiq_$1"
            labels:
              mastodon: "sidekiq"

    serviceMonitor:
      enabled: true
      interval: 30s
      scrapeTimeout: 10s
      namespace: monitoring
      honorLabels: true
      # metrics exposing endpoint
      endpoint: "/metrics"

    service:
      type: ClusterIP
      # The address on which to expose the web interface and generated Prometheus metrics.
      port: 9102
      # Path under which to expose metrics.
      path: /metrics
      annotations: {}

    ingress:
      enabled: false
      className: ""
      annotations: {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
      hosts:
        - host: chart-example.local
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

